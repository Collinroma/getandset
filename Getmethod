class Person:
    def __init__(self, name, height, age, weight, eye_color, address, distinct_features, gender, references):
        self.name = name
        self.height = height
        self.age = age
        self.weight = weight
        self.eye_color = eye_color
        self.address = address
        self.distinct_features = distinct_features
        self.gender = gender
        self.references = references

    def get_name(self):
        return self.name

    def set_name(self, name):
        self.name = name

    def get_height(self):
        return self.height

    def set_height(self, height):
        self.height = height

    def get_age(self):
        return self.age

    def set_age(self, age):
        self.age = age

    def get_weight(self):
        return self.weight

    def set_weight(self, weight):
        self.weight = weight

    def get_eye_color(self):
        return self.eye_color

    def set_eye_color(self, eye_color):
        self.eye_color = eye_color

    def get_address(self):
        return self.address

    def set_address(self, address):
        self.address = address

    def get_distinct_features(self):
        return self.distinct_features

    def set_distinct_features(self, distinct_features):
        self.distinct_features = distinct_features

    def get_gender(self):
        return self.gender

    def set_gender(self, gender):
        self.gender = gender

    def get_references(self):
        return self.references

    def set_references(self, references):
        self.references = references


class Offender(Person):
    def __init__(self, name, height, age, weight, eye_color, address, distinct_features, gender, references, convictions,
                 contact_number):
        super().__init__(name, height, age, weight, eye_color, address, distinct_features, gender, references)
        self.convictions = convictions
        self.contact_number = contact_number

    def get_convictions(self):
        return self.convictions

    def set_convictions(self, convictions):
        self.convictions = convictions

    def get_contact_number(self):
        return self.contact_number

    def set_contact_number(self, contact_number):
        self.contact_number = contact_number


class Suspect(Person):
    def __init__(self, name, height, age, weight, eye_color, address, distinct_features, gender, references, offenses,
                 date, case_file_number):
        super().__init__(name, height, age, weight, eye_color, address, distinct_features, gender, references)
        self.offenses = offenses
        self.date = date
        self.case_file_number = case_file_number

    def get_offenses(self):
        return self.offenses

    def set_offenses(self, offenses):
        self.offenses = offenses

    def get_date(self):
        return self.date

    def set_date(self, date):
        self.date = date

    def get_case_file_number(self):
        return self.case_file_number

    def set_case_file_number(self, case_file_number):
        self.case_file_number = case_file_number


class ParadeDay:
    def __init__(self):
        self.offenders = []
        self.suspects = []

    def add_offender(self, offender):
        self.offenders.append(offender)

    def add_suspect(self, suspect):
        self.suspects.append(suspect)

    def display_offenders_by_case_file_number(self, case_file_number):
        matching_offenders = [offender for offender in self.offenders if
                              offender.get_case_file_number() == case_file_number]

        if len(matching_offenders) < 3:
            print("Not enough matching offenders found.")
        else:
            print("Matching Offenders:")
            for offender in matching_offenders:
                print(f"Name: {offender.get_name()}")
                print(f"Contact Number: {offender.get_contact_number()}")
                print(f"Distinct Features: {offender.get_distinct_features()}")
                for suspect in self.suspects:
                    if suspect.get_case_file_number() == case_file_number:
                        print(f"Suspect Distinct Features: {suspect.get_distinct_features()}")
                        print(f"Suspect ID Parade Date: {suspect.get_date()}")
                print("\n")

    def run(self):
        while True:
            print("Menu:")
            print("1. Add Offender Information")
            print("2. Add Suspect Information")
            print("3. Display Offenders by Case File Number")
            print("4. Exit")

            choice = input("Enter your choice: ")

            if choice == '1':
                name = input("Enter name: ")
                height = float(input("Enter height in cm: "))
                age = int(input("Enter age: "))
                weight = float(input("Enter weight in lbs: "))
                eye_color = input("Enter eye color: ")
                address = input("Enter address: ")
                distinct_features = input("Enter distinct features: ")
                gender = input("Enter gender: ")
                references = input("Enter references: ")
                convictions = input("Enter convictions (comma separated): ")
                contact_number = input("Enter contact number: ")

                offender = Offender(name, height, age, weight, eye_color, address, distinct_features, gender, references,
                                    convictions.split(", "), contact_number)
                self.add_offender(offender)
                print("Offender information added.")

            elif choice == '2':
                name = input("Enter name: ")
                height = float(input("Enter height in cm: "))
                age = int(input("Enter age: "))
                weight = float(input("Enter weight in lbs: "))
                eye_color = input("Enter eye color: ")
                address = input("Enter address: ")
                distinct_features = input("Enter distinct features: ")
                gender = input("Enter gender: ")
                references = input("Enter references: ")
                offenses = input("Enter offenses (comma separated): ")
                date = input("Enter ID parade date: ")
                case_file_number = input("Enter case file number: ")

                suspect = Suspect(name, height, age, weight, eye_color, address, distinct_features, gender, references,
                                  offenses.split(", "), date, case_file_number)
                self.add_suspect(suspect)
                print("Suspect information added.")

            elif choice == '3':
                case_file_number = input("Enter case file number to display matching offenders: ")
                self.display_offenders_by_case_file_number(case_file_number)

            elif choice == '4':
                print("Exiting the application.")
                break

            else:
                print("Invalid choice. Please try again.")


if __name__ == "__main__":
    parade_day = ParadeDay()
    parade_day.run()
